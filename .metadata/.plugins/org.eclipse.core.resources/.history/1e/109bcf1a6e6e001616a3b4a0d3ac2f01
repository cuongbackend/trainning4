package io.fruitbase.api.rest.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import io.fruitbase.business.dto.member.ResponseObject;
import io.fruitbase.business.services.dummy.dto.TeamCreationRequest;
import io.fruitbase.business.services.team.TeamService;
import io.fruitbase.model.entities.Team;


@Controller
@RequestMapping(value = "/team")
public class TeamController {

	
	@Autowired
	TeamService data;

	
	@RequestMapping(method = RequestMethod.POST)
	@ResponseBody
	public final ResponseEntity<Object> creat(@RequestBody TeamCreationRequest request) {
		ResponseObject<Object> response = new ResponseObject<Object>();
		Team team = data.create(request);
		response.setResponseData(team);
		return new ResponseEntity<Object>(response, new HttpHeaders(), HttpStatus.OK);
	}

	
	@RequestMapping(method = RequestMethod.GET)
	@ResponseBody
	public final ResponseEntity<Object> list(@RequestParam(value = "k", required = false) String name) {
		ResponseObject<Object> response = new ResponseObject<Object>();
		List<Team> teams = StringUtils.isEmpty(name) ? data.list() : data.search(name);
		response.setResponseData(teams);
		return new ResponseEntity<Object>(response, new HttpHeaders(), HttpStatus.OK);
	}

	
	@RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
	@ResponseBody
	public final ResponseEntity<Object> delete(@PathVariable Integer id) {
		ResponseObject<Object> response = new ResponseObject<Object>();
		boolean isSuccess = data.delete(id);
		response.setResponseData(isSuccess);
		return new ResponseEntity<Object>(response, new HttpHeaders(), HttpStatus.OK);
	}

	
	@RequestMapping(method = RequestMethod.GET)
	@ResponseBody
	public final ResponseEntity<Object> listAll(@RequestParam(value = "k", required = false) String name) {
		ResponseObject<Object> response = new ResponseObject<Object>();
		List<Team> teams = StringUtils.isEmpty(name) ? data.list() : data.search(name);
		response.setResponseData(teams);
		return new ResponseEntity<Object>(response, new HttpHeaders(), HttpStatus.OK);
	}
}
